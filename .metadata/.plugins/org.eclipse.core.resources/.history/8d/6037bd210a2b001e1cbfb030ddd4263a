package challenge.support.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import challenge.support.persistence.model.Pelicula;
import challenge.support.persistence.service.impl.SupportDataServiceImplement;

@RestController
@RequestMapping("/api/support")
public class SupportController {

	@Autowired
	private SupportDataServiceImplement supportDataService;
	
	@GetMapping("/peliculas/{id}")
	public ResponseEntity<Pelicula> getPelicula(@PathVariable Long id) {
		Pelicula pelicula = supportDataService.getPeliculaById(id);
		if(pelicula != null) {
			return ResponseEntity.ok(pelicula);
		} else {
			return ResponseEntity.notFound().build();
		}
	}
	
	@GetMapping("/peliculas")
	public ResponseEntity<List<Pelicula>> getAllPeliculas() {
		List<Pelicula> peliculas = supportDataService.getAllPeliculas();
		if(!peliculas.isEmpty()) {
			return ResponseEntity.ok(peliculas);
		} else {
			return ResponseEntity.noContent().build();
		}
	}
	
	@PostMapping("/peliculas")
	public ResponseEntity<Pelicula> createPelicula(@RequestBody Pelicula pelicula) {
		Pelicula createdPelicula = supportDataService.createPelicula(pelicula);
		return ResponseEntity.status(HttpStatus.CREATED).body(createdPelicula);
	}
	
	@PutMapping("/peliculas/{id}")
	public ResponseEntity<Pelicula> updatePelicula(@PathVariable Long id, @RequestBody Pelicula pelicula) {
		Pelicula updatedPelicula = supportDataService.updatePelicula(id, pelicula);
		if(updatedPelicula != null) {
			return ResponseEntity.ok(updatedPelicula);
		} else {
			return ResponseEntity.notFound().build();
		}
	}
	
	@DeleteMapping("/peliculas/{id}")
	public ResponseEntity<Void> deletePelicula(@PathVariable Long id){
		boolean deletedPelicula = supportDataService.deletePelicula(id);
		if(deletedPelicula) {
			
		}
	}
}
